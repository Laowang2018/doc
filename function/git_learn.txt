git log --pretty=format:"%h - %an, %ar : %s"

格式化  git log  的输出
%h 表示只输出啥sha1值的开头一部分
%an 表示输出作者
%ar 表示输出时间
%s 表示输出提交注释


git config --global 给当前整个计算机一次性设置
git config --system 给当前系统用户一次性设置
git config --local 给当前项目一次性设置

git config --local user.name "laowang"
git config --local user.email "wsj6051@126.com"

如果三个地方都设置了，local先生效 ， 其次system , 最后global

删除配置
git config --local --unset user.name


.gitignore文件说明

*.txt 所有的txt文件
!b.txt 不忽略b.txt
dir/  dir文件夹下面的所有
dir/*.txt 忽略dir目录下的所有txt文件
dir/*/*.txt 忽略dir/abc/a.txt  dir/xyz/c.txt
dir/**/*.txt 忽略任意级别目录的txt文件
git是默认忽略空目录的

git reflog:查看所有操作记录， 可以帮我们实现后悔操作。
reset 实现版本切换
    git reset --hard HEAD^^  当前分支退后两次提交
    git reset --hard HEAD~1  当前分支退后一次提交
    git reset --hard sha1值  直接回退到指定的提交点

checkout 可以切换分支
    git checkout dev
checkout 可以切换到游离状态
    git checkout sha1值

git分支管理
git branch   查看分支
git branch dev  在当前提交点创建一个dev分支
git branch -d dev 删除dev分支，如果dev分支上有没有合并的提交就不会成功
git branch -D dev 强行删除dev分支，不管他需要不需要合并
                故删除分支前，建议先合并
git branch -b dev 创建一个dev分支并切换到dev分支

细节：如果在分支dev中进行了写操作，但是此操作局限在工作区中进行（没add commit)
那么切换master分支后，写操作依然存在master上能够看到

如果分支dev中进行了写操作 进行了commit操作，那么切换到master分支后是看不到这些写操作的
如果在分支dev中进行了写操作，但是操作局限在工作区中进行（没有add commit）

git branch -m old new 修改分支名称从old到new


git stash
    临时保存现场.
    git stash list 查看当前有多少个临时现场
    git stash pop 还原最新临时现场到当前分支

git tag
    打标签
    git tag   查看标签
    git tag v1.0 打标签
    git tag -a v2.0 -m "version upgrade" 打一个新标签v2.0 -a 表示加注释 -m 表示注释的内容

git blame : 责任
    git blame function/git_learn.txt 查看这个文件的修改记录，用于追责

diff : linux系统用来比较文件差异
    diff -u oldfile newfile

 @@ -4,4 +4,6 @@
 - 表示是原文件 oldfile
 + 对比的文件 new file
 4,4 : 表示从第4行开始 比较4行
 4,6 : 表示从第4行开始 比较6行

git diff : 比较的是区中的文件  直接比较暂存区  和  工作区的差别
    git diff sha1值 ： 比较对象区 和工作区差别
    git diff --cached sha1值 : 比较的是 对象区  和  暂存区的差别

先在远程创建一个库：
    git remote add origin 库地址              在远程库地址中增加了一个远程分支,并在本地给他超名字叫origin origin-->库地址
    git push -u origin master                将远程origin与本地master进行分支关联