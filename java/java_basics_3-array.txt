数组：容器
	长度一旦确定不可更改
	数组是一组数据类型相同的数据的组合，将这些数据统一的管理起来
	数组本身是一个引用数据类型，数组内存储的类型可以是基本类型，也可以是引用类型
	boolean b = false;
	(!b)  <==>  (b == false)
	两个表达式效果一样的
	1。数组的定义（声明）：
		数据类型[] 数组名字;
		int[] x;
		char[] y;
		boolean[] z;
		String[] m;
	2。数组的赋值（初始化）：
		静态初始化：
			int[] array = new int[]{10, 20, 30, 40,50}; //可以看到长度 元素（内容）
			int[] array = {10, 20, 30, 40, 50};
			
			int[] array;
			一百行;
			array = new int[]{10, 20, 30, 40, 50};
			//异常： InputMisMatchException  ArrayIndexOutOfBoundsException
		动态初始化：
			int[] array = new int[5];//只要给初始化长度，系统会自动填默认值 
			int[] array = new int[0];//是可以的，长度如果是负数，会报运行时异常
			
	3。数组元素的访问
		通过元素在数组中的位置来访问
		位置--->index索引
		索引的聚会范围 从0开始--->数组长度 - 1
		如果数组的索引超出了上述范围
		会出现一个运行时异常：ArrayIndexOutOfBoundsException
	4。数组元素的遍历（轮询）
		通过循环的方式去访问数组的每一个元素
		jdk出现一个新的特性：增强for循环 加强for forEach
		for(:){} :后面写的是你要遍历的数组是谁  ：前面是定义的变量来接收后面数组中每一个元素的
		加强for只能取值，不能赋值。没有index索引，找不到元素到底是哪一个
		
		int[] array = new int[]{10, 20, 30, 40, 50};
		for(int value ： array){
			System.out.println(value);
		}
		
	5。初始化
		整数型默认值  0
		浮点型默认值 0.0
		字符型的默认值   0 ---char 0号对应的字符是打印不出来的，但是是真实有的
		布尔值的默认值  false
		引用数据类型的默认值  null
	6。内存模型
		引用类型数组放在堆内存中的连续空间
		
		基本类型：
		
			所有的变量空间都存储在栈内存
			
			变量空间存储基本数据类型：存储的是值，一个变量的值改变，另一个不会跟着改变

			变量空间存储引用数据类型：存储的是引用（地址） 一个变量地址对应的值改变 另一个跟着改变


需求：
		创建一个数组，用来存储1-100之间的偶数
		
		int[] array = new int[50];
		for(int i=0; i<=array.length-1; i++){
			array[i] = 2 * i + 2;
		}
		for(int value : array){
			System.out.println(value);
		}
		
		创建一个数组，用来存储1-100之间的奇数
		int[] array = new int[50];
		for(int i=0; i<=array.length-1; i++){
			array[i] = 2 * i + 1;
		}
		for(int val : array){
			System.out.println(val);
		}
		
		给定两个数组a{1,2,3} b{4,5,6} 将两个数组中的元素互换
		方式一：
		int[] a = new int[]{1, 2, 3};
		int[] b = new int[]{4, 5, 6};
		for(int i=0; i<=a.length-1; i++){
			a[i] = a[i] ^ b[i];
			b[i] = a[i] ^ b[i];
			a[i] = a[i] ^ b[i];
		}
		for(int i=0; i<a.length-1; i++){
			System.out.println(a[i] + "  " + b[i]);
		}
		方式二：
		int[] a = new int[]{1, 2, 3};
		int[] b = new int[]{4, 5, 6};
		int[] temp = a;
		a = b;
		b = temp;
		for(int val : a){
			System.out.println(val);
		}
		for(int val : b){
			System.out.println(val);
		}
		
		
		给定一个数组a{1,2,3,4,5,6,7}计算数组中的平均值
		int a = {1,2,3,4,5,6,7};
		int sum = 0;
		for(int i=0; i<=a.length-1; i++){
			sum += a[i];
		}
		sum/(a.length);
		
		给定一个数组a{1,2,3,4,5,6,7}将这个数组中的头尾元素互换
		int[] a = {1, 2, 3, 4, 5, 6, 7};
		for(int i=0; i<=a.length/2-1; i++){
			a[i] = a[i] ^ a[a.length - i - 1];
			a[a.length - i - 1] = a[i] ^ a[a.length - i - 1];
			a[i] = a[i] ^ a[a.length - i - 1];
		} 
		for(int val : a){
			System.out.println(val);
		}
		
		给定一个数组a{1,2,3,4,5,6,7}找出数组中的最大值好最小值
		int[] a = {1,2,3,4,5,6,7};
		int max = a[0];
		int mix = a[0];
		for(int i=0; i<=a.length-1; i++){
			if(a[i] > max){
				a[i] = a[i] ^ max;
				max = a[i] ^ max;
				a[i] = a[i] ^ max;
			} 
			if(a[i] < mix){
				a[i] = a[i] ^ mix;
				mix = a[i] ^ mix;
				a[i] = a[i] ^ mix;
			}
		}
		
		
		
		
		给定两个数组工{1，2，3} b{4,5}合并两个数组（创建一个新数组）
		方式一：
		int[] a = new int[]{1,2,3};
		int[] b = new int[]{4,5};
		int[] c = new int[a.length + b.length];
		for(int i=0; i<c.length; i++){
			if(i < a.length){
				c[i] = a[i];
			} else {
				c[i] = b[i - a.length];
			}
		}
		for(int val : c){
			System.out.println(val);
		}
		方式二：
		int[] a = new int[]{1,2,3};
		int[] b = new int[]{4,5};
		int[] c = new int[a.length + b.length];
		for(int i=0; i<a.length; i++){
			c[i] = a[i];
		}
		for(int i=0; i<b.length; i++){
			c[i+a.length] = b[i];
		}
		for(int val : c){
			System.out.println(val);
		}
		
		
		给定一个数组a{1,2,3,7,9,5,8}按照数组中的最大值的位置，将数组拆分成两个{1,2,3,5} {5,8}
		int[] a = {1, 2, 3, 7, 9, 5, 8};
		int max = a[0];
		int index = 0;
		for(int i=1; i<a.length; i++){
			if(a[i] > max){
				max = a[i];
				index = i;
			}
		}
		System.out.println(max + "   " + i);
		int[] arrOne = new int[index];
		int[] arrTwo = new int[a.length - index - 1];
		for(int i=0; i<a.length; i++){
			if(i < index){
				arrOne[i] = a[i];
			} else if(i > index){
				arrTwo[i - index - 1] = a[i];
			}
		}
		for(int val : arrOne){
			System.out.println(val);
		}
		for(int val : arrTwo){
			System.out.println(val);
		}
		
		给定一个数组工{1，2，3，0，0，4，5，0，6，0，7}去掉数组中的0元素（创建一个新数组将非零的挑出来）
		int[] a = new int[]{1, 2, 3, 0, 0, 4, 5, 0, 6, 0,7};
		int count = 0;
		for(int i=0; i<a.length; i++){
			if(a[i] != 0){
				count++;
			}
		}
		System.out.println(count);
		int[] b = new int[count];
		int index = 0;//从新数组第一个开始
		for(int i=0; i<a.length; i++){
			if(a[i] != 0){
				b[index] = a[i];
				index++;
			}
		}
		for(int val : b){
			System.out.println(val);
		}
		创建一个数组 存储2-100之间的素数
		方式一：
		int count = 0;
		for(int i=2; i<=100; i++){
			boolean flag = false;
			for(int j=2; j<=i-1; j++){
				if(i%j == 0){
					System.out.println(i + "不是素数");
					flag = true;
				}
			}
			if(flag == false){//flag==false >>>> !flag
				System.out.println(i + "是素数");
				count++;
			}
		}
		int[] arr = new int[count];
		int index = 0;
		for(int i=2; i<=100; i++){
			boolean flag = false;
			for(int j=2; j<=i-1; j++){
				if(i%j == 0){
					System.out.println(i + "不是素数");
					flag = true;
				}
			}
			if(flag == false){//flag==false >>>> !flag
				System.out.println(i + "是素数");
				arr[index] = i;
				index++;//arr[index++] = i;
			}
			
		方式二:
		int[] primeArr = new int[50];
		int index = 0;
		for(int i=2; i<=100; i++){
			boolean flag = false;
			for(int j=2; j<=i-1; j++){
				if(i%j == 0){
					//不是素数
					flag = true;
					break;
				}
			}
			if(flag == false){
				//是素数
				primeArr[index] = i;
				index++;
			}
		}
		int[] newArr = new int[index];
		for(int i=0; i<newArr.length; i++){
			newArr[i] = primeArr[i];
		}
		primeArr = null;
		for(int val : newArr){
			System.out.println(val);
		}
		
		数组元素的排序
		冒泡排序：int[] a = {2,3,5,1,4};
		int[] a = {2,3,5,1,4};
		for(int i=0; i<a.length; i++){
			for(int j=4; j>=1; j--){
				if(a[j] < a[j-1]){
					//交换
					int temp = a[j];
					a[j] = a[j-1];
					a[j-1] = temp;
				}
			}
		}
		for(int val : a){
			System.out.println(val);
		}
		
		for(int i=1; i<a.length; i++){
			for(int j=a.length-1; j >= i; j--){
				if(a[j] < a[j-1]){
					int temp = a[j];
					a[j] = a[j-1];
					a[j-1] = temp;
				}
			}
		}
		
		
		
		用户的登录认证（用数组当作小数据库 存值 用户验证）
		方式一：
		String[] users = {"laowang", "java", "xiaowang"};
		String[] passwords = {"123456", "654321", "345261"};
		Scanner input = new Scanner(System.in);
		System.out.println("请输入帐号：");
		String user = input.nextLine();
		System.out.println("请输入密码：");
		String pwd = input.nextLine();
		boolean flag = false;
		for(int i=0; i<users.length; i++){
			if(users[i].equals(user)){
				//用户名存在
				if(pwd.equals(pwsswords[i])){
					//密码输入也是正确的
					System.out.println("登录成功！");
					flag = true;
				}
				
				break;
			}
		}
		if(flag == false){
			System.out.println("用户名或密码错误！");
		}
		
		方式二：
		String[] users = {"laowang", "java", "xiaowang"};
        String[] passwords = {"123456", "654321", "345261"};
        Scanner input = new Scanner(System.in);
        System.out.println("input your username:");
        String user = input.nextLine();
        System.out.println("input your password:");
        String pwd = input.nextLine();
        boolean flag = false;
        for(int i=0; i<users.length; i++){
            if(users[i].equals(user)){
                if(pwd.equals(passwords[i])){
                    System.out.println("sign in success!");
                } else {
					System.out.println("password is wrong!");
				}
				flag = true;
                break;
            }
        }
        if(flag == false){
            System.out.println("username is wrong!");
        }
		
多维数组：
	数组的定义/声明
		int[][] array;
	数组的初始化
		静态初始化--有长度 有元素
		int[][] array = {{1,2,3},{4,5,6},{7,8,9}};
		int[][] array = new int[][]{{1,2},{3,4,5,6},{7,8,9}};
		动态初始化--有长度 没有元素（默认值）
		int[][] array = new int[3][3];
	数组元素的访问
		
		通过元素在数组中的位置----index索引
	数组元素的遍历/轮询
	
三维数组：
	创建一个数组 数组内存储好多个int[][]
	int[][][] array = {{{1,2},{3,4}},{{},{}},{{},{}}};
	int[][][] array = new int[3][][];
		三个二维数组 第一个里面有两个一维数组 每个一维数组里面有两个int元素
		
常见的运行里异常：
	InputMisMatchException 输入类型不匹配 
		Scanner.nextInt();要求输入整数 却输入a
	
	ArrayIndexOutOfBoundsException 数组索引越界
		静态初始化 int[] array = {10, 20};
		array[2] 索引超出边界异常
		
	NegativeArraySizeException 数组长度不合法（长度出现非法）
		如长度为 -1
		
	NullPointerException 空指针异常
		引用为null 还拿来使用
		int[] array = null;
		array[0] = 10;
		
练习：
	模拟班级同学每周换位置，整换的换：
	{{1，2，3，4}，{5，6，7，8}，{9，10，11，12}，{13，14，15，16}}
	每周换一次，如果6周换多少次
	int[][] students = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}}
	Scanner input = new Scanner(System.in);
	int week = input.nextInt();
	for(int i=0; i<week; i++){
		int[] a = students[0];
		students[0] = students[1];
		students[1] = students[2];
		students[2] = students[3];
		students[3] = a;
	}
	for(int[] arr : students){
		for(int val : arr){
			System.out.println(val);
		}
	}
	
	利用二维数组，完成用户登录认证
	{{"laowang","123456"},{"xiaowang","654321"},{"java","456123"}}
	
main方法：
	public 访问权限修饰符 公有的
	static 特征修饰符 静态的 有且公有一份
	void 方法的执行完没有返回值 关键字
	main 方法的名字 主要的
	主方法中的args参数 可否传递？
	主方法不是我们调用的 JVM虚拟机启动的时候 虚拟机调用的
	主方法里面有args参数 是一个String[]类型 我们是可以传递参数进去 给JVM