java数据类型：

一：基本数据类型：

整型4个 
    1。byte:字节型 8个bit位：1字节
	
	用第一个记录符号
	10000000 --- -128
	11111111 --- -127
	...
	00000000 --- 0
	...
	01111111 --- 127
	
	不能表示128，故byte可表示大小范围是：-128 ~ 127 总计256个
	2。short:短整型 16个bit位：2字节
	65536种组合 表示大小范围为：-32768 ~ 32767
	3。int:普通整型 32个bit位：4字节
	2^32=4294967296种组合 表示大小范围为：-2147483648 ~ 2147483647
	4。long:长整型 64个bit位：8字节
	2^64种组合 表示大小范围为：-2^63 ~ 2^63-1 
	
浮点型 2个 
	1。float：单精度浮点型 32个bit位：4字节
	32位中分3部分：第1位是符号位，第2至10位是计算整数部分，其他22位是小数部分。
	2。double：双精度浮点型 64个bit位：8字节
	64位中分3部分：第1位表示符号，第2到20位是计算整数部分，其他44位是表示小数部分。
	
字符型 1个 
	char：字符型（为了以示区分 每个字符的前后各加单引号） 8个bit位：1字节（仅ascii码） 或者 16个bit位：2字节（Unicode）（如中文）
	
	这其中因为java内部使用的是Unicode编码，所以一个char是2字节。
	Unicode只有正数没有负数，所以Unicode范围是0 ~ 65535
	如果是使用ASCII码（美标码） 那么也就是一个char是1个字节。

布尔型 1个 
	boolean：true false 仅占用一个bit位 8分之1的字节长

二：引用数据类型：
	数组 []
	类class 抽象类 abstract class 
	接口 interface
	枚举 enum
	注解 @interface
	
三：常量
	代表的是程序在运行过程中不能再次改变的量或值。
	常量的作用：
	1。固定的值 代表计算过程中经常用到的值
	便于程序计算
	如 圆周率3.141592...
	
	2。用来代表一个含义
	1 2 3 4 分别代表上下左右四个方向
	
	什么样的值算是常量呢？固定不变的值算作常量
	
	1。1 3.14 'a' true
	可以认为所有基本类型的值 固定不变 是常量
	
	2。特殊的常量
	字符串String是一个引用数据类型，它的值很特殊 可以简单的视为常量
	
	3。自己创建的空间 存储一个值 让它固定起来 不能改变（自己定义的常量）
	final int UP = 1;
	
	
	变量
	
	变量指的是 程序执行过程中可以改变的
	变量是一个内存空间（小容器）
	变量空间在创建（声明）的时候 必须指定数据类型 变量空间的名字
	变量空间 里面只能存储一个内容（值 引用）
	变量空间内的内容可以改变
	
	变量如何声明/创建
	数据类型 变量名字;
	int a;
	String str;
	
	创建变量名时要注意的命名问题
	命名规则
		字母（大小写敏感） 数字（数字不能开头） 符号（英文符号_ $） 中文（不推荐）
		
	命名的规约
		类名字 首字母大写 如果两个以上的单词 所有的单词首字母大写
			SuperPerson
		变量名 首字母小写 如果两个以上的单词 之后的单词首字母大写
			superPerson
			遵循驼峰式命名规约
		所有的名字都要见名知义
			为了增强程序的可读性
			
	注意：
		变量是一个空间 可以只创建空间 里面不存放内容
		变量空间创建后是没有默认的内容 空的
		空的变量空间不能拿来使用 编译错误
		
		byte x;//声明一个变量空间 空间的名字是x 空间内要求存储的类型是byte整数
		x = 1;//将一个1赋值到变量空间内进行存储
		byte x = 1;
		
		计算机到底做了什么？
		1。x是什么？ 变量空间 存储在哪儿？栈内存中
		2。1是什么？ 1是常量值 存在哪儿？常量缓冲区中
		3。=是什么？ =是赋值 做了什么？把常缓冲区中的常量1复制一份存到栈内存x空间中
		
		JVM内存：栈内存 堆内存 方法区(方法区中的内容不会改变)：常量缓冲区，方法区（存放类模板），静态元素区 static
		
		注释：
		1。单行注释
		//
		2。多行注释
		/*
		
		*/
		3。文档注释
		/**
		
		*/
		
		float 3 = 3.4;//编译报错：会有精确损失
			从double转换到float会有损失
			1 3.4常量值
			存储在常量缓冲区中的
			常量值的存储形式肯定不是十进制 是以二进制形式存储
			1---->32bit(int)
			3.4---->64bit(double)
			
		byte a = 1;
			1---->32bit
			00000000 00000000 00000000 00000001
			a---->8bit
			00000001
			如果前24个bit全是0，那么=号就能无损的把1存放到a中
			=号赋值的时候做了一个自动的决定 自动类型转化
			
		long d = 2147483648;//编译报错：过大的整数 只有数字大小超过了int表示的范围才去加上L，如果没超过会自动类型转换
			2147483648---->int(默认)
			但是int能表示的最大数是2147483647，所以编译器认为你写错了
			要明确告诉编译器你要赋值给d的值是long类型的：
			long d = 2147483648L;//L/lf都可以，但是与1容易混淆，故用L与F对应，都用大写
			常量值加L非必须的，只有超了int范围才必须加L
			
		String i = "abc";
		
		字符		字符串
		'c'        "a" "abc" "" null
		基本类型    引用类型	
		
		常量池中的值默认空间大小
			整形默认是int 32bit
			浮点型默认是double 64bit
		
四：数据类型之间的转化问题
	int a = 1;
	int b = 1;
	int b = a;
	a和b的空间类型是一样的，如果变量空间不一样呢？
	byte a = 1;//8bit
	int b = a;//32bit
	
	int a = 1;
	byte b = (byte)a;//127 强制类型转换 如果a的值超过了byte表示范围 就会出现精度损失
	 
	1。同种数据类型之间是可以直接进行赋值操作
		int a = 1; int b = a; || float x = 3.4F; float y = x;
		
	2。数据类型不同的空间之间的赋值---->转换问题
		同种大数据类型之间才能发生转换
			基本类型----基本类型之间 可以直接转换（自动 强制）
			引用类型----引用类型之间 可以直接转换（自动 强制--上转型 下转型）
			
			基本类型----引用类型之间 不可以直接转换（间接--包装类/封装类）
			
	3。保证大数据类型一致的前提下
		基本类型----基本类型
			小数据类型相同
				都是整形 都是浮点
				大空间变量可以直接存储小空间数据
				小空间变量不可以直接存储大空间的数据（需要强制类型转换）
				转换过程写法都好用 如果转换的过程中数值范围超过边界 可能会有损失
				
				byte a = 1;int b = a;//自动直接转化就可以
				int a = 1;byte b = (byte)a;//需要强制类型转换
				float x = 3.4F;double y = x;//自动直接转化
				double x = 3.4;float y = (float)x;//强制转换
				
				如果发现强制转换之前的数值比较大 强制转换这件事情可以
				int a = 1000;byte b = (byte)a;//编译好用 执行后 b存放的值一定发生变化
				System.out.println(b == -24);//true
				负数在存储的是源码的反码的补码
					源码 除了符号位其他位都取反 加1
					取反 +1
				知道存储值 --> 源码
					补码 减1 除了符号位其他位都取反
					-1 取反
			小数据类型不同
				int a = 1;
				float b = a;//写法是可以的 b == 1.0;从精确程度来说也是可行的
				
				long a = 1;//64bit
				float b = a;//32bit 也是可以的 精确程度
				
				整形----浮点型
				两个比较精确程度 浮点型精确程度更高 可以直接存放整数 反之需要强制转换
				任何一个浮点型都可以直接存放一个整形
				int a = 1; float b = a;//自动直接转化
				float a = 1.0F;int b = (int)a;//强制类型转换
				
			char---字符---'a'---00110110---97---int
			整形---字符型
				每一个字符都对应着一个Unicode码 'a'---97
				char x = 'a';int y = x;//自动转化 y---97
				int x = 97;char y = (char)x;//强制转化
			
			*布尔类型很特殊的基本数据类型 不能与其他的基本类型进行转换
		引用类型之间
	
	
	
	
	